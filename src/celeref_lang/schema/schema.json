{
  "$schema": "http://json-schema.org/schema",

  "description": "JSON schema for celeref programming language",
  "type": "object",

  "required": ["program"],
  "properties": {
    "name": {
      "description": "Name of the app",
      "type": "string"
    },
    "program": {
      "$ref": "#/definitions/statement"
    }
  },

  "definitions": {
    "literal": {
      "description": "A literal",
      "type": ["string", "boolean", "null", "number", "integer"]
    },

    "statement": {
      "description": "A statement block",
      "oneOf": [
        { "$ref": "#/definitions/literal" },
        { "$ref": "#/definitions/expression" },
        { "$ref": "#/definitions/block" }
      ]
    },

    "block": {
      "description": "An array of statements",
      "type": "array",
      "items": {
        "$ref": "#/definitions/statement"
      }
    },

    "function": {
      "description": "A callable function",
      "type": "object",
      "required": ["method"],
      "additionalProperties": false,
      "properties": {
        "method": {
          "description": "Method name to call",
          "type": "string"
        },
        "args": {
          "description": "The arguments to pass.",
          "type": "array",
          "items": { "$ref": "#/definitions/statement" }
        },
        "kwargs": {
          "description": "The keyword arguments to pass.",
          "type": "object",
          "propertyNames": { "minLength": 1 },
          "patternProperties": {
            "": { "$ref": "#/definitions/statement" }
          }
        }
      }
    },

    "expression": {
      "description": "A single statement. It consists of one and only one command.",
      "type": "object",
      "maxProperties": 1,
      "additionalProperties": false,
      "properties": {
        "state": {
          "description": "Set any value to the current state"
        },

        "load": {
          "description": "Move the value of a variable to the current state",
          "type": "string"
        },

        "save": {
          "description": "Copy the value of the current state to a variable",
          "type": "string"
        },

        "set": {
          "description": "Declare a new variable and assign any value to it.\n\nWarning: If new variable already variable exists, the value will be replaced by this assignment.",
          "type": "object",
          "propertyNames": { "minLength": 1 }
        },

        "move": {
          "description": "Move the value of a variable to a new variable\n\nThe keys of this object are the names of new variables, and values are names of old variables.\n\nWarning: If new variable already variable exists, the value will be replaced by this assignment.",
          "type": "object",
          "propertyNames": { "minLength": 1 },
          "patternProperties": {
            "": { "type": "string" }
          }
        },

        "print": {
          "description": " Accepts the name of a variable, and prints its value to the console.",
          "type": "string"
        },

        "if-else": {
          "description": "If the current state evaluates to True, executes first statement available in the block, otherwise executes second statement.\n\nA state will be evaluated to true, when it is not false, zero, null or empty.\n\nNote: If you omit the second statement, the first statement will run, if the current state evaluates to True.",
          "$ref": "#/definitions/block",
          "minItems": 1,
          "maxItems": 2
        },

        "switch": {
          "description": "An array of statement blocks with a condition.\n\nThe `true` will run, if and only if the `condition` is evaluated to True; otherwise `false` will run. Both `true` and `false` blocks are optional.\n\nAnother optional block `finally` will only run after executing first three blocks.",
          "type": "array",
          "items": {
            "description": "A conditional block",
            "type": "object",
            "required": ["condition"],
            "additionalProperties": false,
            "properties": {
              "condition": { "$ref": "#/definitions/statement" },
              "true": { "$ref": "#/definitions/statement" },
              "false": { "$ref": "#/definitions/statement" },
              "finally": { "$ref": "#/definitions/statement" }
            }
          }
        },

        "loop": {
          "description": "Loop over every items of the current state.\n\nState does not necessarily be a list; if state is a number, loops from 0 to the state; if state is a string, loops over every characters; if state is an object, loops over every (key, value) pair.\n\nInside the loop, the current state is set to the loop iterator. All variable accessed by the parent block, can also be accessed here. \n\nThe final states of this block will be stored into a collection. The collection will be available as the next state.",
          "$ref": "#/definitions/statement"
        },

        "at": {
          "description": "Access an indexed item of the current state. The current state must be an array, or map or support access via index. The next state will be the accessed value",
          "oneOf": [
            { "type": ["string", "integer"] },
            { "$ref": "#/definitions/expression" }
          ]
        },

        "dot": {
          "description": "Access any property of the current state. The next state will be the value of that property",
          "type": "string"
        },

        "call": {
          "description": "Calls a function with current state as argument. The next state will be the output of the function",
          "$ref": "#/definitions/function"
        },

        "dot-call": {
          "description": "Calls a method of the current state, with some arguments. The next state will be the output of the method",
          "$ref": "#/definitions/function"
        }
      }
    }
  }
}
